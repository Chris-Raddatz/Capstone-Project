{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNE2zi0ssP/9rIhG/986wAJ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Chris-Raddatz/Capstone-Project/blob/main/BIOF%20475%20Final%20Project\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 182,
      "metadata": {
        "id": "WH5FPs2JYlR9"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.model_selection import train_test_split\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Loads the diabetes-dataset.csv Download diabetes-dataset.csv  CSV using Pandas. Delete the rows with unrealistic entries (For example, some subjects have zero Glucose, zero BloodPressure, zero SkinThickness, zero Insulin, or zero BMI)"
      ],
      "metadata": {
        "id": "u8t8O5IPeueK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('/content/diabetes-dataset.csv')"
      ],
      "metadata": {
        "id": "xUvxLfkHY_EF"
      },
      "execution_count": 183,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "cbBxdN8eZB5r",
        "outputId": "9b1c9f3f-2021-4bd4-d149-90b01d747320"
      },
      "execution_count": 184,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
              "0               2      138             62             35        0  33.6   \n",
              "1               0       84             82             31      125  38.2   \n",
              "2               0      145              0              0        0  44.2   \n",
              "3               0      135             68             42      250  42.3   \n",
              "4               1      139             62             41      480  40.7   \n",
              "...           ...      ...            ...            ...      ...   ...   \n",
              "1995            2       75             64             24       55  29.7   \n",
              "1996            8      179             72             42      130  32.7   \n",
              "1997            6       85             78              0        0  31.2   \n",
              "1998            0      129            110             46      130  67.1   \n",
              "1999            2       81             72             15       76  30.1   \n",
              "\n",
              "      DiabetesPedigreeFunction  Age  Outcome  \n",
              "0                        0.127   47        1  \n",
              "1                        0.233   23        0  \n",
              "2                        0.630   31        1  \n",
              "3                        0.365   24        1  \n",
              "4                        0.536   21        0  \n",
              "...                        ...  ...      ...  \n",
              "1995                     0.370   33        0  \n",
              "1996                     0.719   36        1  \n",
              "1997                     0.382   42        0  \n",
              "1998                     0.319   26        1  \n",
              "1999                     0.547   25        0  \n",
              "\n",
              "[2000 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d4e49855-c7fe-4d81-bf26-4c439559f703\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>BloodPressure</th>\n",
              "      <th>SkinThickness</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <th>Age</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2</td>\n",
              "      <td>138</td>\n",
              "      <td>62</td>\n",
              "      <td>35</td>\n",
              "      <td>0</td>\n",
              "      <td>33.6</td>\n",
              "      <td>0.127</td>\n",
              "      <td>47</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>84</td>\n",
              "      <td>82</td>\n",
              "      <td>31</td>\n",
              "      <td>125</td>\n",
              "      <td>38.2</td>\n",
              "      <td>0.233</td>\n",
              "      <td>23</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>145</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>44.2</td>\n",
              "      <td>0.630</td>\n",
              "      <td>31</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>135</td>\n",
              "      <td>68</td>\n",
              "      <td>42</td>\n",
              "      <td>250</td>\n",
              "      <td>42.3</td>\n",
              "      <td>0.365</td>\n",
              "      <td>24</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>139</td>\n",
              "      <td>62</td>\n",
              "      <td>41</td>\n",
              "      <td>480</td>\n",
              "      <td>40.7</td>\n",
              "      <td>0.536</td>\n",
              "      <td>21</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1995</th>\n",
              "      <td>2</td>\n",
              "      <td>75</td>\n",
              "      <td>64</td>\n",
              "      <td>24</td>\n",
              "      <td>55</td>\n",
              "      <td>29.7</td>\n",
              "      <td>0.370</td>\n",
              "      <td>33</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1996</th>\n",
              "      <td>8</td>\n",
              "      <td>179</td>\n",
              "      <td>72</td>\n",
              "      <td>42</td>\n",
              "      <td>130</td>\n",
              "      <td>32.7</td>\n",
              "      <td>0.719</td>\n",
              "      <td>36</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1997</th>\n",
              "      <td>6</td>\n",
              "      <td>85</td>\n",
              "      <td>78</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>31.2</td>\n",
              "      <td>0.382</td>\n",
              "      <td>42</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1998</th>\n",
              "      <td>0</td>\n",
              "      <td>129</td>\n",
              "      <td>110</td>\n",
              "      <td>46</td>\n",
              "      <td>130</td>\n",
              "      <td>67.1</td>\n",
              "      <td>0.319</td>\n",
              "      <td>26</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1999</th>\n",
              "      <td>2</td>\n",
              "      <td>81</td>\n",
              "      <td>72</td>\n",
              "      <td>15</td>\n",
              "      <td>76</td>\n",
              "      <td>30.1</td>\n",
              "      <td>0.547</td>\n",
              "      <td>25</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2000 rows × 9 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d4e49855-c7fe-4d81-bf26-4c439559f703')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d4e49855-c7fe-4d81-bf26-4c439559f703 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d4e49855-c7fe-4d81-bf26-4c439559f703');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 184
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().value_counts() #So there are no null values, but we still need to remove the illogical data. "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qAZVZZqxcwUh",
        "outputId": "0e0d96d0-e969-482b-afc6-5bbd241bb9a6"
      },
      "execution_count": 185,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin  BMI    DiabetesPedigreeFunction  Age    Outcome\n",
              "False        False    False          False          False    False  False                     False  False      2000\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 185
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in df.columns[1:8]:\n",
        "  df[i].replace(to_replace = 0, value = np.NaN, inplace = True)\n",
        "  print(df[i].isnull().value_counts())\n",
        "df.dropna(inplace = True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UcwKrh2Bb-6R",
        "outputId": "e5753fed-5545-42e9-b05f-f2e9aaa5c27f"
      },
      "execution_count": 186,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False    1987\n",
            "True       13\n",
            "Name: Glucose, dtype: int64\n",
            "False    1910\n",
            "True       90\n",
            "Name: BloodPressure, dtype: int64\n",
            "False    1427\n",
            "True      573\n",
            "Name: SkinThickness, dtype: int64\n",
            "False    1044\n",
            "True      956\n",
            "Name: Insulin, dtype: int64\n",
            "False    1972\n",
            "True       28\n",
            "Name: BMI, dtype: int64\n",
            "False    2000\n",
            "Name: DiabetesPedigreeFunction, dtype: int64\n",
            "False    2000\n",
            "Name: Age, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Our dataset is pretty much cut in half, but this will help produce better results."
      ],
      "metadata": {
        "id": "LAOWnqApeZAX"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. Splits the data into a training, validation, and test set using \"train_test_split\" function, with the training containing 80% of the observations and the validation and test sets each containing 10% of the observations"
      ],
      "metadata": {
        "id": "hWTXk4zkeyaw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_train, df_test = train_test_split(df, train_size = 0.8, random_state = 0)"
      ],
      "metadata": {
        "id": "qBKraR_yZStH"
      },
      "execution_count": 187,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_test, df_validation = train_test_split(df_test, train_size = 0.5, random_state = 0)"
      ],
      "metadata": {
        "id": "2cu80_Ak73ob"
      },
      "execution_count": 188,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. Plots a histogram of the Age column for the training data"
      ],
      "metadata": {
        "id": "C3XNf6CgflvL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_train['Age'].plot.hist(rwidth = 0.9)\n",
        "plt.title('Training Data Right Skewed')\n",
        "plt.ylabel('Frequency')\n",
        "plt.xlabel('Age')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "xCIf6BE8lwjC",
        "outputId": "d64247c4-daf4-42cd-f75b-35f08ff97b52"
      },
      "execution_count": 230,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. Computes and plots the sample correlation matrix for all columns of the training data"
      ],
      "metadata": {
        "id": "klZ6dOX_fnp5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "float_set = df.to_numpy(dtype = np.float32) "
      ],
      "metadata": {
        "id": "k-fdrMpBlAuV"
      },
      "execution_count": 190,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cor_samples = np.corrcoef(float_set, rowvar = False)\n",
        "cor_samples"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zp9XjbevnVve",
        "outputId": "50ac5d4d-6959-4a29-e8a7-c12ed2299a85"
      },
      "execution_count": 191,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 1.        ,  0.18327215,  0.19195148,  0.10451226,  0.07541846,\n",
              "        -0.02396266,  0.02501807,  0.6613585 ,  0.26472192],\n",
              "       [ 0.18327215,  1.        ,  0.18287606,  0.22131056,  0.56063519,\n",
              "         0.21839787,  0.1303609 ,  0.30697425,  0.52160714],\n",
              "       [ 0.19195148,  0.18287606,  1.        ,  0.25344176,  0.09890688,\n",
              "         0.30453201,  0.00980085,  0.30566614,  0.21238242],\n",
              "       [ 0.10451226,  0.22131056,  0.25344176,  1.        ,  0.20503196,\n",
              "         0.64509235,  0.16032599,  0.20354493,  0.26747505],\n",
              "       [ 0.07541846,  0.56063519,  0.09890688,  0.20503196,  1.        ,\n",
              "         0.25326607,  0.13467925,  0.14275534,  0.29171177],\n",
              "       [-0.02396266,  0.21839787,  0.30453201,  0.64509235,  0.25326607,\n",
              "         1.        ,  0.15176182,  0.07855708,  0.24712905],\n",
              "       [ 0.02501807,  0.1303609 ,  0.00980085,  0.16032599,  0.13467925,\n",
              "         0.15176182,  1.        ,  0.10508547,  0.18597341],\n",
              "       [ 0.6613585 ,  0.30697425,  0.30566614,  0.20354493,  0.14275534,\n",
              "         0.07855708,  0.10508547,  1.        ,  0.34206192],\n",
              "       [ 0.26472192,  0.52160714,  0.21238242,  0.26747505,  0.29171177,\n",
              "         0.24712905,  0.18597341,  0.34206192,  1.        ]])"
            ]
          },
          "metadata": {},
          "execution_count": 191
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "xs = list(range(len(df_train.columns)))\n",
        "\n",
        "fig = plt.figure()\n",
        "ax = fig.add_axes([.1,.2,.8,.9])\n",
        "cax = ax.matshow(cor_samples, cmap = \"seismic\", vmax = 1.0, vmin = -1.0)\n",
        "cbar = fig.colorbar(cax)\n",
        "cbar.ax.set_ylabel(\"Sample Correlation\")\n",
        "ax.xaxis.set_ticks_position(\"bottom\")\n",
        "ax.set_xticks(xs)\n",
        "ax.set_xticklabels(df_train.columns, rotation = 90)\n",
        "ax.set_yticks(xs)\n",
        "ax.set_yticklabels(df_train.columns)\n",
        "plt.title(\"Correlation Matrix for Dataset\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 457
        },
        "id": "IYPhPboYnfHY",
        "outputId": "ac3e70c2-425e-4042-ddce-f285431ba73a"
      },
      "execution_count": 192,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "5. a) Performs PCA using all of the columns except the 'Outcome' column"
      ],
      "metadata": {
        "id": "Jkb4ybqsfqKa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X_train = df_train[df_train.columns[:-1]].to_numpy()"
      ],
      "metadata": {
        "id": "Su6fdMQyorrx"
      },
      "execution_count": 193,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9aDdx5gofgdp",
        "outputId": "a23b6a30-c597-4b31-f6f7-10faaaa1a3df"
      },
      "execution_count": 194,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[  3.   , 103.   ,  72.   , ...,  27.6  ,   0.73 ,  27.   ],\n",
              "       [  3.   , 187.   ,  70.   , ...,  36.4  ,   0.408,  36.   ],\n",
              "       [  6.   , 151.   ,  62.   , ...,  35.5  ,   0.692,  28.   ],\n",
              "       ...,\n",
              "       [  5.   , 189.   ,  64.   , ...,  31.2  ,   0.583,  29.   ],\n",
              "       [  2.   ,  68.   ,  62.   , ...,  20.1  ,   0.257,  23.   ],\n",
              "       [  1.   , 109.   ,  56.   , ...,  25.2  ,   0.833,  23.   ]])"
            ]
          },
          "metadata": {},
          "execution_count": 194
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train_mean = X_train.mean(axis = 0)\n",
        "X_train_std = X_train.std(axis = 0)\n",
        "X_train_z = (X_train - X_train_mean) / X_train_std"
      ],
      "metadata": {
        "id": "hQI7nwGnpHwI"
      },
      "execution_count": 195,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pca = PCA()"
      ],
      "metadata": {
        "id": "jeSMjoXapUW4"
      },
      "execution_count": 196,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train_pca = pca.fit_transform(X_train_z)"
      ],
      "metadata": {
        "id": "eZOHfsvzpaxs"
      },
      "execution_count": 197,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pca.explained_variance_ratio_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zz0jsCE9uPIe",
        "outputId": "27935d4e-4c07-40a0-96e1-1b754019a84d"
      },
      "execution_count": 198,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.3133072 , 0.18912743, 0.15029323, 0.11820562, 0.09351485,\n",
              "       0.05427629, 0.04237673, 0.03889865])"
            ]
          },
          "metadata": {},
          "execution_count": 198
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "5. b) finds the number of components to use using a Scree Plot and the \"elbow\" method"
      ],
      "metadata": {
        "id": "PPuyusSZoLWK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pc_values = np.arange(pca.n_components_) + 1\n",
        "plt.plot(pc_values, pca.explained_variance_ratio_, 'ro-', linewidth = 2)\n",
        "plt.title('Scree Plot')\n",
        "plt.xlabel('Component')\n",
        "plt.xticks(pc_values)\n",
        "plt.ylabel('Percent Variance Explained')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "VI0ttFNLprRC",
        "outputId": "6dc3c546-a401-4d75-cfa9-92543bba3bfb"
      },
      "execution_count": 199,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The number of components needed is most likely 5, as at 6 the components really start to level off in contribution to the variance. I also found some rule that if your Scree plot doesn't have an easily identifiable elbow pick up to the number of components to where the variance ~80%."
      ],
      "metadata": {
        "id": "6ensRNyysCVb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "6. Using PCA and number of selected components in the previous problem, uses K-Means clustering, the Inertia Plot, and the \"elbow\" method to find the number of clusters in the training data"
      ],
      "metadata": {
        "id": "HRmfWJwznvmF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pca_5 = PCA(n_components = 5)"
      ],
      "metadata": {
        "id": "Bwy--Q19VJe8"
      },
      "execution_count": 200,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train_pca5 = pca_5.fit_transform(X_train_z)"
      ],
      "metadata": {
        "id": "cTaczbtdVOTQ"
      },
      "execution_count": 201,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "inertias = []\n",
        "ks = []\n",
        "for k in range(1,11):\n",
        "  ks.append(k)\n",
        "  print('K=' + str(k))\n",
        "  kmeans = KMeans(n_clusters = k)\n",
        "  kmeans.fit(X_train_pca5)\n",
        "  print('inertia = ' + str(kmeans.inertia_), '\\n')\n",
        "  inertias.append(kmeans.inertia_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7cl5QTNyTojE",
        "outputId": "f7d17698-62ab-46ec-8966-1e707722e9d5"
      },
      "execution_count": 202,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "K=1\n",
            "inertia = 5726.105803103319 \n",
            "\n",
            "K=2\n",
            "inertia = 4284.034443520831 \n",
            "\n",
            "K=3\n",
            "inertia = 3554.856487812366 \n",
            "\n",
            "K=4\n",
            "inertia = 3120.465613705129 \n",
            "\n",
            "K=5\n",
            "inertia = 2864.630222102595 \n",
            "\n",
            "K=6\n",
            "inertia = 2664.8206109539638 \n",
            "\n",
            "K=7\n",
            "inertia = 2489.427967608347 \n",
            "\n",
            "K=8\n",
            "inertia = 2326.361446718931 \n",
            "\n",
            "K=9\n",
            "inertia = 2177.5645401330553 \n",
            "\n",
            "K=10\n",
            "inertia = 2074.24645081541 \n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "xs = np.array(list(range(len(ks))))\n",
        "fig = plt.figure()\n",
        "ax = fig.add_axes([0.1,0.2,0.8,0.9])\n",
        "ax.plot(xs, inertias, 'r-')\n",
        "ax.set_xticks(xs)\n",
        "ax.set_xticklabels(ks)\n",
        "ax.set_xlabel('k')\n",
        "ax.set_ylabel('Inertia')\n",
        "plt.title('Inertia Plot')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 337
        },
        "id": "ktM1iGvnT9KL",
        "outputId": "3adb3e04-fd61-4daf-d74a-99994aa03493"
      },
      "execution_count": 203,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I believe the moment the curve becomes non-linear is at k = 3, this is also where the slope starts to drop off tremendously."
      ],
      "metadata": {
        "id": "4M6opBceXI6r"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "KMeans_3 = KMeans(n_clusters = 3)\n",
        "means = KMeans_3.fit(X_train_pca5).cluster_centers_"
      ],
      "metadata": {
        "id": "qYG7ZGE1XjlW"
      },
      "execution_count": 204,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "means"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X79x-O1mX0zd",
        "outputId": "23ad3969-9e08-433f-aeef-9bdd28b03473"
      },
      "execution_count": 205,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 1.50990612,  1.51363758, -0.26969614,  0.1227981 ,  0.20631745],\n",
              "       [ 0.91425905, -1.21090781, -0.09730175, -0.1441753 ,  0.0566653 ],\n",
              "       [-1.32233077,  0.06709792,  0.19298486,  0.03551567, -0.13600008]])"
            ]
          },
          "metadata": {},
          "execution_count": 205
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "7. a) Trains a Linear Regression model using the training data to predict 'BMI' from z-scored 'Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', and 'Age', "
      ],
      "metadata": {
        "id": "I5GmaIXsn0LU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_train.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r9-WwUbtlcs8",
        "outputId": "2667caff-708d-4cce-a38a-8ad150109b51"
      },
      "execution_count": 206,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',\n",
              "       'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 206
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "euDPsMSRmOaz",
        "outputId": "11849d2c-bf33-4179-b384-a0e41b2a8cff"
      },
      "execution_count": 207,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
              "1101            3    103.0           72.0           30.0    152.0  27.6   \n",
              "1205            3    187.0           70.0           22.0    200.0  36.4   \n",
              "295             6    151.0           62.0           31.0    120.0  35.5   \n",
              "1545            1    139.0           62.0           41.0    480.0  40.7   \n",
              "1472            1    143.0           74.0           22.0     61.0  26.2   \n",
              "...           ...      ...            ...            ...      ...   ...   \n",
              "540             8    100.0           74.0           40.0    215.0  39.4   \n",
              "1474            3    173.0           84.0           33.0    474.0  35.7   \n",
              "1613            5    189.0           64.0           33.0    325.0  31.2   \n",
              "1074            2     68.0           62.0           13.0     15.0  20.1   \n",
              "1315            1    109.0           56.0           21.0    135.0  25.2   \n",
              "\n",
              "      DiabetesPedigreeFunction  Age  Outcome  \n",
              "1101                     0.730   27        0  \n",
              "1205                     0.408   36        1  \n",
              "295                      0.692   28        0  \n",
              "1545                     0.536   21        0  \n",
              "1472                     0.256   21        0  \n",
              "...                        ...  ...      ...  \n",
              "540                      0.661   43        1  \n",
              "1474                     0.258   22        1  \n",
              "1613                     0.583   29        1  \n",
              "1074                     0.257   23        0  \n",
              "1315                     0.833   23        0  \n",
              "\n",
              "[828 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7be696d0-21f7-44da-a9e1-1a19f60f7a68\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>BloodPressure</th>\n",
              "      <th>SkinThickness</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <th>Age</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1101</th>\n",
              "      <td>3</td>\n",
              "      <td>103.0</td>\n",
              "      <td>72.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>152.0</td>\n",
              "      <td>27.6</td>\n",
              "      <td>0.730</td>\n",
              "      <td>27</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1205</th>\n",
              "      <td>3</td>\n",
              "      <td>187.0</td>\n",
              "      <td>70.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>36.4</td>\n",
              "      <td>0.408</td>\n",
              "      <td>36</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>295</th>\n",
              "      <td>6</td>\n",
              "      <td>151.0</td>\n",
              "      <td>62.0</td>\n",
              "      <td>31.0</td>\n",
              "      <td>120.0</td>\n",
              "      <td>35.5</td>\n",
              "      <td>0.692</td>\n",
              "      <td>28</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1545</th>\n",
              "      <td>1</td>\n",
              "      <td>139.0</td>\n",
              "      <td>62.0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>480.0</td>\n",
              "      <td>40.7</td>\n",
              "      <td>0.536</td>\n",
              "      <td>21</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1472</th>\n",
              "      <td>1</td>\n",
              "      <td>143.0</td>\n",
              "      <td>74.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>61.0</td>\n",
              "      <td>26.2</td>\n",
              "      <td>0.256</td>\n",
              "      <td>21</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>540</th>\n",
              "      <td>8</td>\n",
              "      <td>100.0</td>\n",
              "      <td>74.0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>215.0</td>\n",
              "      <td>39.4</td>\n",
              "      <td>0.661</td>\n",
              "      <td>43</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1474</th>\n",
              "      <td>3</td>\n",
              "      <td>173.0</td>\n",
              "      <td>84.0</td>\n",
              "      <td>33.0</td>\n",
              "      <td>474.0</td>\n",
              "      <td>35.7</td>\n",
              "      <td>0.258</td>\n",
              "      <td>22</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1613</th>\n",
              "      <td>5</td>\n",
              "      <td>189.0</td>\n",
              "      <td>64.0</td>\n",
              "      <td>33.0</td>\n",
              "      <td>325.0</td>\n",
              "      <td>31.2</td>\n",
              "      <td>0.583</td>\n",
              "      <td>29</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1074</th>\n",
              "      <td>2</td>\n",
              "      <td>68.0</td>\n",
              "      <td>62.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>20.1</td>\n",
              "      <td>0.257</td>\n",
              "      <td>23</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1315</th>\n",
              "      <td>1</td>\n",
              "      <td>109.0</td>\n",
              "      <td>56.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>135.0</td>\n",
              "      <td>25.2</td>\n",
              "      <td>0.833</td>\n",
              "      <td>23</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>828 rows × 9 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7be696d0-21f7-44da-a9e1-1a19f60f7a68')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7be696d0-21f7-44da-a9e1-1a19f60f7a68 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7be696d0-21f7-44da-a9e1-1a19f60f7a68');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 207
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "features_train = df_train.drop(columns = ['BMI', 'DiabetesPedigreeFunction', 'Outcome'])\n",
        "features_validation = df_validation.drop(columns = ['BMI', 'DiabetesPedigreeFunction', 'Outcome'])\n",
        "features_test = df_test.drop(columns = ['BMI', 'DiabetesPedigreeFunction', 'Outcome'])"
      ],
      "metadata": {
        "id": "XGRE-ymgle3y"
      },
      "execution_count": 208,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "features_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "9HA70YP6meHT",
        "outputId": "47473ee2-4395-4f83-8bf3-287d7636b3fb"
      },
      "execution_count": 209,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin  Age\n",
              "1101            3    103.0           72.0           30.0    152.0   27\n",
              "1205            3    187.0           70.0           22.0    200.0   36\n",
              "295             6    151.0           62.0           31.0    120.0   28\n",
              "1545            1    139.0           62.0           41.0    480.0   21\n",
              "1472            1    143.0           74.0           22.0     61.0   21\n",
              "...           ...      ...            ...            ...      ...  ...\n",
              "540             8    100.0           74.0           40.0    215.0   43\n",
              "1474            3    173.0           84.0           33.0    474.0   22\n",
              "1613            5    189.0           64.0           33.0    325.0   29\n",
              "1074            2     68.0           62.0           13.0     15.0   23\n",
              "1315            1    109.0           56.0           21.0    135.0   23\n",
              "\n",
              "[828 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d11ed9ec-11f8-4559-9499-faf553607d76\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>BloodPressure</th>\n",
              "      <th>SkinThickness</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>Age</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1101</th>\n",
              "      <td>3</td>\n",
              "      <td>103.0</td>\n",
              "      <td>72.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>152.0</td>\n",
              "      <td>27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1205</th>\n",
              "      <td>3</td>\n",
              "      <td>187.0</td>\n",
              "      <td>70.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>200.0</td>\n",
              "      <td>36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>295</th>\n",
              "      <td>6</td>\n",
              "      <td>151.0</td>\n",
              "      <td>62.0</td>\n",
              "      <td>31.0</td>\n",
              "      <td>120.0</td>\n",
              "      <td>28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1545</th>\n",
              "      <td>1</td>\n",
              "      <td>139.0</td>\n",
              "      <td>62.0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>480.0</td>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1472</th>\n",
              "      <td>1</td>\n",
              "      <td>143.0</td>\n",
              "      <td>74.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>61.0</td>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>540</th>\n",
              "      <td>8</td>\n",
              "      <td>100.0</td>\n",
              "      <td>74.0</td>\n",
              "      <td>40.0</td>\n",
              "      <td>215.0</td>\n",
              "      <td>43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1474</th>\n",
              "      <td>3</td>\n",
              "      <td>173.0</td>\n",
              "      <td>84.0</td>\n",
              "      <td>33.0</td>\n",
              "      <td>474.0</td>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1613</th>\n",
              "      <td>5</td>\n",
              "      <td>189.0</td>\n",
              "      <td>64.0</td>\n",
              "      <td>33.0</td>\n",
              "      <td>325.0</td>\n",
              "      <td>29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1074</th>\n",
              "      <td>2</td>\n",
              "      <td>68.0</td>\n",
              "      <td>62.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1315</th>\n",
              "      <td>1</td>\n",
              "      <td>109.0</td>\n",
              "      <td>56.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>135.0</td>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>828 rows × 6 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d11ed9ec-11f8-4559-9499-faf553607d76')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d11ed9ec-11f8-4559-9499-faf553607d76 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d11ed9ec-11f8-4559-9499-faf553607d76');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 209
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_train = features_train.to_numpy()\n",
        "y_train = df_train['BMI'].to_numpy()"
      ],
      "metadata": {
        "id": "4A_6OT1ullGp"
      },
      "execution_count": 210,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train_z = (x_train-x_train.mean(axis = 0, keepdims = True))/x_train.std(axis = 0, keepdims = True)"
      ],
      "metadata": {
        "id": "ziSdLUp-muUV"
      },
      "execution_count": 211,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "model = LinearRegression()\n",
        "model.fit(x_train_z, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QfgV_EPGlzKn",
        "outputId": "03899195-1f1b-4bbe-bcc1-81a1c0412dd6"
      },
      "execution_count": 212,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ]
          },
          "metadata": {},
          "execution_count": 212
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred_train = model.predict(x_train_z)"
      ],
      "metadata": {
        "id": "n6_1dS4-m9ii"
      },
      "execution_count": 213,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "7. b) computes the Mean Squared Error (MSE) and correlation between the model's predictions and the actual 'BMI' values for the training data, validation data, and test data"
      ],
      "metadata": {
        "id": "cUCSrjHon2ke"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x_validation = features_validation.to_numpy()\n",
        "y_validation = df_validation['BMI'].to_numpy()\n",
        "\n",
        "x_validation_z = (x_validation-x_validation.mean(axis = 0, keepdims = True))/x_validation.std(axis = 0, keepdims = True)\n",
        "\n",
        "y_pred_validation = model.predict(x_validation_z)\n",
        "\n",
        "x_test = features_test.to_numpy()\n",
        "y_test = df_test['BMI'].to_numpy()\n",
        "\n",
        "x_test_z = (x_test-x_test.mean(axis = 0, keepdims = True))/x_test.std(axis = 0, keepdims = True)\n",
        "\n",
        "y_pred_test = model.predict(x_test_z)"
      ],
      "metadata": {
        "id": "3ob0mOf2pc8b"
      },
      "execution_count": 214,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_squared_error\n",
        "print(\"Mean squared error for training set:\", round(mean_squared_error(y_train, y_pred_train), 2))\n",
        "print(\"Mean squared error for validation set:\", round(mean_squared_error(y_validation, y_pred_validation), 2))\n",
        "print(\"Mean squared error for testing set:\", round(mean_squared_error(y_test, y_pred_test), 2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4jp3Qav2nHNa",
        "outputId": "fb1cb34a-53bd-41a9-8fb3-ce356f424d4b"
      },
      "execution_count": 231,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean squared error for training set: 26.27\n",
            "Mean squared error for validation set: 34.2\n",
            "Mean squared error for testing set: 26.45\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "7. c) plots the betas of for the trained Linear Regression model"
      ],
      "metadata": {
        "id": "b-Y7RYovoCpZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model.coef_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pPe92LR514kp",
        "outputId": "544b1729-1e69-4095-a509-3d067826ac1d"
      },
      "execution_count": 216,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-0.85168396,  0.15896451,  1.21980713,  4.13879686,  0.75923769,\n",
              "       -0.0800282 ])"
            ]
          },
          "metadata": {},
          "execution_count": 216
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig = plt.figure()\n",
        "ax = fig.add_axes([0.1,0.2,0.8,0.9])\n",
        "cmax = np.abs(model.coef_).max()\n",
        "cax = ax.matshow(np.reshape(model.coef_, [-1,1]), cmap = 'seismic', aspect = '1.5', vmax = cmax, vmin = -1 * cmax)\n",
        "fig.colorbar(cax)\n",
        "ax.set_yticks(list(range(len(features_train.columns))))\n",
        "ax.set_yticklabels(features_train.columns)\n",
        "ax.set_xticks([])\n",
        "plt.title('Linear Regression Betas')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 323
        },
        "id": "wDLrlEabze1s",
        "outputId": "e92fb5f7-e71e-48e6-fbcd-5e00bdd18980"
      },
      "execution_count": 217,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "8. a) Finds the best L2 regularization strength for a Logistic Regression model, with z-scoring, that predicts 'Outcome' from all of the other variables using the training and validation data,"
      ],
      "metadata": {
        "id": "Rf0xy7Bcn49C"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "features = [x for x in df_train.columns if x!= 'Outcome']"
      ],
      "metadata": {
        "id": "YF9Sx-2_6Qnh"
      },
      "execution_count": 218,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train_logistic = df_train[features].to_numpy(dtype = np.float32)\n",
        "y_train_logistic = df_train['Outcome'].to_numpy()\n",
        "X_validation_logistic = df_validation[features].to_numpy(dtype = np.float32)\n",
        "y_validation_logistic = df_validation['Outcome'].to_numpy()"
      ],
      "metadata": {
        "id": "MmoRio-96VQe"
      },
      "execution_count": 219,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train_logistic_z = (X_train_logistic-X_train_logistic.mean(axis = 0, keepdims = True))/X_train_logistic.std(axis = 0, keepdims = True)\n",
        "X_validation_logistic_z = (X_validation_logistic-X_validation_logistic.mean(axis = 0, keepdims = True))/X_validation_logistic.std(axis = 0, keepdims = True)"
      ],
      "metadata": {
        "id": "yfLAf3RP6trO"
      },
      "execution_count": 220,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression"
      ],
      "metadata": {
        "id": "mnbPAmEV3Zlb"
      },
      "execution_count": 221,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for c in [np.inf, 1000,100,10,1,0.1,0.01,0.001,0.0001]:\n",
        "  print(\"C= \" + str(c))\n",
        "  if c == np.inf:\n",
        "    model_logic = LogisticRegression(max_iter = 10000, penalty = 'none')\n",
        "  else:\n",
        "    model_logic = LogisticRegression(max_iter = 10000, solver = 'liblinear', penalty = 'l2', C = c)\n",
        "  model_logic.fit(X_train_logistic_z, y_train_logistic)\n",
        "  y_train_preds = model_logic.predict(X_train_logistic_z)\n",
        "  print(\"Train Validation Accuracy:\")\n",
        "  print(np.equal(y_train_preds, y_train_logistic).mean())\n",
        "  print(\"Test Validation Accuracy:\")\n",
        "  validation = np.equal(model_logic.predict(X_validation_logistic_z), y_validation_logistic).mean()\n",
        "  print(validation,\"\\n\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MfSpMug23YUh",
        "outputId": "f6a43900-45da-4303-ca79-6258d6a84809"
      },
      "execution_count": 222,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "C= inf\n",
            "Train Validation Accuracy:\n",
            "0.788647342995169\n",
            "Test Validation Accuracy:\n",
            "0.7692307692307693 \n",
            "\n",
            "C= 1000\n",
            "Train Validation Accuracy:\n",
            "0.788647342995169\n",
            "Test Validation Accuracy:\n",
            "0.7692307692307693 \n",
            "\n",
            "C= 100\n",
            "Train Validation Accuracy:\n",
            "0.788647342995169\n",
            "Test Validation Accuracy:\n",
            "0.7692307692307693 \n",
            "\n",
            "C= 10\n",
            "Train Validation Accuracy:\n",
            "0.788647342995169\n",
            "Test Validation Accuracy:\n",
            "0.7692307692307693 \n",
            "\n",
            "C= 1\n",
            "Train Validation Accuracy:\n",
            "0.7874396135265701\n",
            "Test Validation Accuracy:\n",
            "0.7692307692307693 \n",
            "\n",
            "C= 0.1\n",
            "Train Validation Accuracy:\n",
            "0.783816425120773\n",
            "Test Validation Accuracy:\n",
            "0.75 \n",
            "\n",
            "C= 0.01\n",
            "Train Validation Accuracy:\n",
            "0.788647342995169\n",
            "Test Validation Accuracy:\n",
            "0.7980769230769231 \n",
            "\n",
            "C= 0.001\n",
            "Train Validation Accuracy:\n",
            "0.7608695652173914\n",
            "Test Validation Accuracy:\n",
            "0.75 \n",
            "\n",
            "C= 0.0001\n",
            "Train Validation Accuracy:\n",
            "0.7536231884057971\n",
            "Test Validation Accuracy:\n",
            "0.75 \n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Although C = 0.01 does have a slightly higher training accuracy, which may be overfitting, it has the highest validation accuracy by a significant amount compared to the differences among the other C values, so let's go with 0.01"
      ],
      "metadata": {
        "id": "GHk8-peN0fTI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "8. b) computes the accuracy of the best model determined from (a) on the test data"
      ],
      "metadata": {
        "id": "Xii4nyn8n8aq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X_test_logistic = df_test[features].to_numpy(dtype = np.float32)\n",
        "y_test_logistic = df_test['Outcome'].to_numpy()"
      ],
      "metadata": {
        "id": "r-2yBc0T9Vsd"
      },
      "execution_count": 223,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_test_logistic_z = (X_test_logistic-X_test_logistic.mean(axis = 0, keepdims = True))/X_test_logistic.std(axis = 0, keepdims = True)"
      ],
      "metadata": {
        "id": "fFsKNa_b-pEG"
      },
      "execution_count": 224,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model_l2 = LogisticRegression(max_iter = 10000, penalty = 'l2', solver = 'liblinear', C = 0.01)\n",
        "model_l2.fit(X_train_logistic_z, y_train_logistic)\n",
        "y_logistic_test_pred = model_l2.predict(X_test_logistic_z)"
      ],
      "metadata": {
        "id": "zriB0J7088Eg"
      },
      "execution_count": 225,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "np.equal(y_logistic_test_pred, y_test_logistic).mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YnF6Cjwi9uyn",
        "outputId": "011decb2-f825-45df-fc9e-421e4f3c947f"
      },
      "execution_count": 226,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8446601941747572"
            ]
          },
          "metadata": {},
          "execution_count": 226
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "8. c) plots the betas of the best model based on the train data"
      ],
      "metadata": {
        "id": "h-HYE3Z-n-zR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model_l2.coef_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QVIulE3p-En-",
        "outputId": "85261b9a-ceff-4a06-bf9a-7ca6f0a98142"
      },
      "execution_count": 227,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.19912805, 0.55450922, 0.10412443, 0.15450102, 0.12863226,\n",
              "        0.17605228, 0.17693558, 0.19470487]])"
            ]
          },
          "metadata": {},
          "execution_count": 227
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig = plt.figure()\n",
        "ax = fig.add_axes([0.1,0.2,0.8,0.9])\n",
        "cmax = np.abs(model_l2.coef_).max()\n",
        "cax = ax.matshow(np.reshape(model_l2.coef_,[-1,1]), cmap= 'seismic', aspect = '1.5',vmax = cmax, vmin = -1 * cmax)\n",
        "fig.colorbar(cax)\n",
        "ax.set_yticks(list(range(len(df.columns[:-1]))))\n",
        "ax.set_yticklabels(df.columns[:-1])\n",
        "ax.set_xticks([])\n",
        "plt.title('Logistic Regression Betas')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 323
        },
        "id": "zy2Lwxcg9z1n",
        "outputId": "8bec9b76-d2c5-4ff5-f3ff-bf6942b9a2ea"
      },
      "execution_count": 228,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "xs = list(range(len(df_train.columns)))\n",
        "\n",
        "fig = plt.figure()\n",
        "ax = fig.add_axes([.1,.2,.8,.9])\n",
        "cax = ax.matshow(cor_samples, cmap = \"seismic\", vmax = 1.0, vmin = -1.0)\n",
        "cbar = fig.colorbar(cax)\n",
        "cbar.ax.set_ylabel(\"Sample Correlation\")\n",
        "ax.xaxis.set_ticks_position(\"bottom\")\n",
        "ax.set_xticks(xs)\n",
        "ax.set_xticklabels(df_train.columns, rotation = 90)\n",
        "ax.set_yticks(xs)\n",
        "ax.set_yticklabels(df_train.columns)\n",
        "plt.title(\"Correlation Matrix for Dataset\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 457
        },
        "id": "LfoQu9W7ztPU",
        "outputId": "62236682-0361-432b-d7dc-686a596a6ab1"
      },
      "execution_count": 229,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}